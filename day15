// index.js
const fs = require('fs');
const readline = require('readline');
const EventEmitter = require('events');

// Initialize event emitter
const eventEmitter = new EventEmitter();

// Load users data
let usersData = JSON.parse(fs.readFileSync('users.json'));

// Function to save users data
function saveUsersData() {
  fs.writeFileSync('users.json', JSON.stringify(usersData, null, 2));
}

// Function to handle user authentication
function authenticateUser(accountID, pin) {
  const user = usersData.find(user => user.accountID === accountID && user.pin === pin);
  return user ? user : null;
}

// Function to handle checking balance
function checkBalance(user) {
  console.log(`Your current balance is $${user.balance}`);
}

// Function to handle depositing money
function depositMoney(user, amount) {
  user.balance += amount;
  user.transactions.push({ type: 'deposit', amount, date: new Date().toISOString() });
  saveUsersData();
  console.log(`Successfully deposited $${amount}`);
}

// Function to handle withdrawing money
function withdrawMoney(user, amount) {
  if (user.balance >= amount) {
    user.balance -= amount;
    user.transactions.push({ type: 'withdraw', amount, date: new Date().toISOString() });
    saveUsersData();
    console.log(`Successfully withdrew $${amount}`);
  } else {
    console.log('Insufficient funds');
  }
}

// Function to handle viewing transaction history
function viewTransactions(user) {
  console.log('Transaction History:');
  user.transactions.forEach(transaction => {
    console.log(`${transaction.type}: $${transaction.amount} on ${transaction.date}`);
  });
}

// Event listeners
eventEmitter.on('checkBalance', checkBalance);
eventEmitter.on('deposit', depositMoney);
eventEmitter.on('withdraw', withdrawMoney);
eventEmitter.on('viewTransactions', viewTransactions);

// CLI Interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function promptUser() {
  rl.question('Enter your account ID: ', (accountID) => {
    rl.0.('Enter your PIN: ', (pin) => {
      const user = authenticateUser(accountID, pin);
      if (user) {
        console.log('Welcome, ' + user.name);
        showOptions(user);
      } else {
        console.log('Invalid credentials');
        promptUser();
      }
    });
  });
}

function showOptions(user) {
  console.log('\nOptions:');
  console.log('1. Check Balance');
  console.log('2. Deposit Money');
  console.log('3. Withdraw Money');
  console.log('4. View Transaction History');
  console.log('5. Exit');

  rl.question('Enter your choice: ', (choice) => {
    switch (choice) {
      case '1':
        eventEmitter.emit('checkBalance', user);
        break;
      case '2':
        rl.question('Enter amount to deposit: ', (amount) => {
          eventEmitter.emit('deposit', user, parseFloat(amount));
        });
        break;
      case '3':
        rl.question('Enter amount to withdraw: ', (amount) => {
          eventEmitter.emit('withdraw', user, parseFloat(amount));
        });
        break;
      case '4':
        eventEmitter.emit('viewTransactions', user);
        break;
      case '5':
        console.log('Exiting...');
        rl.close();
        break;
      default:
        console.log('Invalid choice');
    }
    showOptions(user);
  });
}

// Start the application
promptUser();
